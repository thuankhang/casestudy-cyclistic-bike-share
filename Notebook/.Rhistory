rm(tripdata_2023_06_1)
rm(tripdata_2023_06_2)
# July
tripdata_2023_07_1 <- read.csv("../Data/2023/202307-divvy-tripdata_1.csv")
tripdata_2023_07_2 <- read.csv("../Data/2023/202307-divvy-tripdata_2.csv")
tripdata_2023_07 = sqldf("
SELECT * FROM tripdata_2023_07_1
UNION ALL
SELECT * FROM tripdata_2023_07_2
")
rm(tripdata_2023_07_1)
rm(tripdata_2023_07_2)
# August
tripdata_2023_08_1 <- read.csv("../Data/2023/202308-divvy-tripdata_1.csv")
tripdata_2023_08_2 <- read.csv("../Data/2023/202308-divvy-tripdata_2.csv")
tripdata_2023_08 = sqldf("
SELECT * FROM tripdata_2023_08_1
UNION ALL
SELECT * FROM tripdata_2023_08_2
")
rm(tripdata_2023_08_1)
rm(tripdata_2023_08_2)
# September
tripdata_2023_09_1 <- read.csv("../Data/2023/202309-divvy-tripdata_1.csv")
tripdata_2023_09_2 <- read.csv("../Data/2023/202309-divvy-tripdata_2.csv")
tripdata_2023_09 = sqldf("
SELECT * FROM tripdata_2023_09_1
UNION ALL
SELECT * FROM tripdata_2023_09_2
")
rm(tripdata_2023_09_1)
rm(tripdata_2023_09_2)
# October
tripdata_2023_10_1 <- read.csv("../Data/2023/202310-divvy-tripdata_1.csv")
tripdata_2023_10_2 <- read.csv("../Data/2023/202310-divvy-tripdata_2.csv")
tripdata_2023_10 = sqldf("
SELECT * FROM tripdata_2023_10_1
UNION ALL
SELECT * FROM tripdata_2023_10_2
")
rm(tripdata_2023_10_1)
rm(tripdata_2023_10_2)
# November
tripdata_2023_11 <- read.csv("../Data/2023/202311-divvy-tripdata.csv")
# December
tripdata_2023_12 <- read.csv("../Data/2023/202312-divvy-tripdata.csv")
df_names = c("tripdata_2023_01", "tripdata_2023_02", "tripdata_2023_03", "tripdata_2023_04", "tripdata_2023_05","tripdata_2023_06", "tripdata_2023_07", "tripdata_2023_08", "tripdata_2023_09", "tripdata_2023_10", "tripdata_2023_11", "tripdata_2023_12")
select_clause = "
SELECT ride_id, rideable_type,
started_at AS start_at,
ended_at AS end_at,
member_casual,
start_station_name, start_station_id,
end_station_name, end_station_id,
CAST((julianday(ended_at) - julianday(started_at)) * 86400 AS INTEGER) AS ride_length,
CASE
WHEN strftime('%w', started_at) = '0' THEN 'Sunday'
WHEN strftime('%w', started_at) = '1' THEN 'Monday'
WHEN strftime('%w', started_at) = '2' THEN 'Tuesday'
WHEN strftime('%w', started_at) = '3' THEN 'Wednesday'
WHEN strftime('%w', started_at) = '4' THEN 'Thursday'
WHEN strftime('%w', started_at) = '5' THEN 'Friday'
WHEN strftime('%w', started_at) = '6' THEN 'Saturday'
END AS day_of_week,
CASE
WHEN CAST(strftime('%H', started_at) AS INTEGER) BETWEEN 0 AND 5 THEN 'Early Morning'
WHEN CAST(strftime('%H', started_at) AS INTEGER) BETWEEN 6 AND 8 THEN 'Morning Commute'
WHEN CAST(strftime('%H', started_at) AS INTEGER) BETWEEN 9 AND 14 THEN 'Midday'
WHEN CAST(strftime('%H', started_at) AS INTEGER) BETWEEN 15 AND 18 THEN 'Evening Commute'
WHEN CAST(strftime('%H', started_at) AS INTEGER) BETWEEN 19 AND 23 THEN 'Night'
END AS time_interval,
strftime('%m', started_at) AS month"
columns = colnames(tripdata_2023_01)
where_clause = paste0(" WHERE " ,paste(columns, "IS NOT NULL", collapse = " AND "), " AND ride_length > 0")
query = paste(
paste(select_clause, " FROM ", df_names, where_clause),
collapse = " UNION ALL "
)
merged_data = sqldf(query)
# Remove df that no longer use for prevent out of memory
rm(tripdata_2023_01)
rm(tripdata_2023_02)
rm(tripdata_2023_03)
rm(tripdata_2023_04)
rm(tripdata_2023_05)
rm(tripdata_2023_06)
rm(tripdata_2023_07)
rm(tripdata_2023_08)
rm(tripdata_2023_09)
rm(tripdata_2023_10)
rm(tripdata_2023_11)
rm(tripdata_2023_12)
str(merged_data)
query = "
SELECT member_casual,
COUNT(*) AS number_of_rides,
SUM(ride_length) AS total_ride_duration,
AVG(ride_length) AS average_ride_duration,
MAX(ride_length) AS max_ride_duration
FROM merged_data
GROUP BY member_casual;
"
ride_summary = sqldf(query)
ride_summary
# January
tripdata_2023_01 <- read.csv("../Data/2023/202301-divvy-tripdata.csv")
# February
tripdata_2023_02 <- read.csv("../Data/2023/202302-divvy-tripdata.csv")
# March
tripdata_2023_03 <- read.csv("../Data/2023/202303-divvy-tripdata.csv")
# April
tripdata_2023_04 <- read.csv("../Data/2023/202304-divvy-tripdata.csv")
# May
tripdata_2023_05_1 <- read.csv("../Data/2023/202305-divvy-tripdata_1.csv")
tripdata_2023_05_2 <- read.csv("../Data/2023/202305-divvy-tripdata_2.csv")
tripdata_2023_05 = sqldf("
SELECT * FROM tripdata_2023_05_1
UNION ALL
SELECT * FROM tripdata_2023_05_2
")
rm(tripdata_2023_05_1)
rm(tripdata_2023_05_2)
# June
tripdata_2023_06_1 <- read.csv("../Data/2023/202306-divvy-tripdata_1.csv")
tripdata_2023_06_2 <- read.csv("../Data/2023/202306-divvy-tripdata_2.csv")
tripdata_2023_06 = sqldf("
SELECT * FROM tripdata_2023_06_1
UNION ALL
SELECT * FROM tripdata_2023_06_2
")
rm(tripdata_2023_06_1)
rm(tripdata_2023_06_2)
# July
tripdata_2023_07_1 <- read.csv("../Data/2023/202307-divvy-tripdata_1.csv")
tripdata_2023_07_2 <- read.csv("../Data/2023/202307-divvy-tripdata_2.csv")
tripdata_2023_07 = sqldf("
SELECT * FROM tripdata_2023_07_1
UNION ALL
SELECT * FROM tripdata_2023_07_2
")
rm(tripdata_2023_07_1)
rm(tripdata_2023_07_2)
# August
tripdata_2023_08_1 <- read.csv("../Data/2023/202308-divvy-tripdata_1.csv")
tripdata_2023_08_2 <- read.csv("../Data/2023/202308-divvy-tripdata_2.csv")
tripdata_2023_08 = sqldf("
SELECT * FROM tripdata_2023_08_1
UNION ALL
SELECT * FROM tripdata_2023_08_2
")
rm(tripdata_2023_08_1)
rm(tripdata_2023_08_2)
# September
tripdata_2023_09_1 <- read.csv("../Data/2023/202309-divvy-tripdata_1.csv")
tripdata_2023_09_2 <- read.csv("../Data/2023/202309-divvy-tripdata_2.csv")
tripdata_2023_09 = sqldf("
SELECT * FROM tripdata_2023_09_1
UNION ALL
SELECT * FROM tripdata_2023_09_2
")
rm(tripdata_2023_09_1)
rm(tripdata_2023_09_2)
# October
tripdata_2023_10_1 <- read.csv("../Data/2023/202310-divvy-tripdata_1.csv")
tripdata_2023_10_2 <- read.csv("../Data/2023/202310-divvy-tripdata_2.csv")
tripdata_2023_10 = sqldf("
SELECT * FROM tripdata_2023_10_1
UNION ALL
SELECT * FROM tripdata_2023_10_2
")
rm(tripdata_2023_10_1)
rm(tripdata_2023_10_2)
# November
tripdata_2023_11 <- read.csv("../Data/2023/202311-divvy-tripdata.csv")
# December
tripdata_2023_12 <- read.csv("../Data/2023/202312-divvy-tripdata.csv")
df_names = c("tripdata_2023_01", "tripdata_2023_02", "tripdata_2023_03", "tripdata_2023_04", "tripdata_2023_05","tripdata_2023_06", "tripdata_2023_07", "tripdata_2023_08", "tripdata_2023_09", "tripdata_2023_10", "tripdata_2023_11", "tripdata_2023_12")
select_clause = "
SELECT ride_id, rideable_type,
started_at AS start_at,
ended_at AS end_at,
member_casual,
start_station_name, start_station_id,
end_station_name, end_station_id,
CAST((julianday(ended_at) - julianday(started_at)) * 86400 AS INTEGER) AS ride_length,
CASE
WHEN strftime('%w', started_at) = '0' THEN 'Sunday'
WHEN strftime('%w', started_at) = '1' THEN 'Monday'
WHEN strftime('%w', started_at) = '2' THEN 'Tuesday'
WHEN strftime('%w', started_at) = '3' THEN 'Wednesday'
WHEN strftime('%w', started_at) = '4' THEN 'Thursday'
WHEN strftime('%w', started_at) = '5' THEN 'Friday'
WHEN strftime('%w', started_at) = '6' THEN 'Saturday'
END AS day_of_week,
CASE
WHEN CAST(strftime('%H', started_at) AS INTEGER) BETWEEN 0 AND 5 THEN 'Early Morning'
WHEN CAST(strftime('%H', started_at) AS INTEGER) BETWEEN 6 AND 8 THEN 'Morning Commute'
WHEN CAST(strftime('%H', started_at) AS INTEGER) BETWEEN 9 AND 14 THEN 'Midday'
WHEN CAST(strftime('%H', started_at) AS INTEGER) BETWEEN 15 AND 18 THEN 'Evening Commute'
WHEN CAST(strftime('%H', started_at) AS INTEGER) BETWEEN 19 AND 23 THEN 'Night'
END AS time_interval,
strftime('%m', started_at) AS month"
columns = colnames(tripdata_2023_01)
where_clause = paste0(" WHERE " ,paste(columns, "IS NOT NULL", collapse = " AND "), " AND CAST((julianday(ended_at) - julianday(started_at)) * 86400 AS INTEGER) > 0")
query = paste(
paste(select_clause, " FROM ", df_names, where_clause),
collapse = " UNION ALL "
)
merged_data = sqldf(query)
# Remove df that no longer use for prevent out of memory
rm(tripdata_2023_01)
rm(tripdata_2023_02)
rm(tripdata_2023_03)
rm(tripdata_2023_04)
rm(tripdata_2023_05)
rm(tripdata_2023_06)
rm(tripdata_2023_07)
rm(tripdata_2023_08)
rm(tripdata_2023_09)
rm(tripdata_2023_10)
rm(tripdata_2023_11)
rm(tripdata_2023_12)
str(merged_data)
query = "
SELECT member_casual,
COUNT(*) AS number_of_rides,
SUM(ride_length) AS total_ride_duration,
AVG(ride_length) AS average_ride_duration,
MAX(ride_length) AS max_ride_duration,
MIN(ride_length) AS min_ride_duration
FROM merged_data
GROUP BY member_casual;
"
ride_summary = sqldf(query)
ride_summary
query = "
SELECT member_casual AS user_type,
SUM(CASE WHEN day_of_week = 'Sunday' THEN ride_duration ELSE 0 END) AS Sunday,
SUM(CASE WHEN day_of_week = 'Monday' THEN ride_duration ELSE 0 END) AS Monday,
SUM(CASE WHEN day_of_week = 'Tuesday' THEN ride_duration ELSE 0 END) AS Tuesday,
SUM(CASE WHEN day_of_week = 'Wednesday' THEN ride_duration ELSE 0 END) AS Wednesday,
SUM(CASE WHEN day_of_week = 'Thursday' THEN ride_duration ELSE 0 END) AS Thursday,
SUM(CASE WHEN day_of_week = 'Friday' THEN ride_duration ELSE 0 END) AS Friday,
SUM(CASE WHEN day_of_week = 'Saturday' THEN ride_duration ELSE 0 END) AS Saturday
FROM merged_data
GROUP BY member_casual;
"
ride_duration_by_user_type_day_of_week = sqldf(query)
query = "
SELECT member_casual AS user_type,
SUM(CASE WHEN day_of_week = 'Sunday' THEN ride_length ELSE 0 END) AS Sunday,
SUM(CASE WHEN day_of_week = 'Monday' THEN ride_length ELSE 0 END) AS Monday,
SUM(CASE WHEN day_of_week = 'Tuesday' THEN ride_length ELSE 0 END) AS Tuesday,
SUM(CASE WHEN day_of_week = 'Wednesday' THEN ride_length ELSE 0 END) AS Wednesday,
SUM(CASE WHEN day_of_week = 'Thursday' THEN ride_length ELSE 0 END) AS Thursday,
SUM(CASE WHEN day_of_week = 'Friday' THEN ride_length ELSE 0 END) AS Friday,
SUM(CASE WHEN day_of_week = 'Saturday' THEN ride_length ELSE 0 END) AS Saturday
FROM merged_data
GROUP BY member_casual;
"
ride_duration_by_user_type_day_of_week = sqldf(query)
ride_duration_by_user_type_day_of_week
View(ride_duration_by_user_type_day_of_week)
query = "
SELECT member_casual AS user_type,
SUM(CASE WHEN day_of_week = 'Sunday' THEN ride_length ELSE 0 END) AS Sunday,
SUM(CASE WHEN day_of_week = 'Monday' THEN ride_length ELSE 0 END) AS Monday,
SUM(CASE WHEN day_of_week = 'Tuesday' THEN ride_length ELSE 0 END) AS Tuesday,
SUM(CASE WHEN day_of_week = 'Wednesday' THEN ride_length ELSE 0 END) AS Wednesday,
SUM(CASE WHEN day_of_week = 'Thursday' THEN ride_length ELSE 0 END) AS Thursday,
SUM(CASE WHEN day_of_week = 'Friday' THEN ride_length ELSE 0 END) AS Friday,
SUM(CASE WHEN day_of_week = 'Saturday' THEN ride_length ELSE 0 END) AS Saturday
FROM merged_data
GROUP BY member_casual;
"
ride_duration_by_user_type_day_of_week = sqldf(query)
View(ride_duration_by_user_type_day_of_week)
ride_duration_by_user_type_day_of_week
ride_summary$number_of_rides[2] // 3600
ride_summary$number_of_rides[2]/ 3600
ride_duration_by_user_type_day_of_week[-1] = ride_duration_by_user_type_day_of_week[-1] / 3600
ride_duration_by_user_type_day_of_week
query = "
SELECT member_casual AS user_type,
SUM(CASE WHEN day_of_week = 'Sunday' THEN ride_length ELSE 0 END) AS Sunday,
SUM(CASE WHEN day_of_week = 'Monday' THEN ride_length ELSE 0 END) AS Monday,
SUM(CASE WHEN day_of_week = 'Tuesday' THEN ride_length ELSE 0 END) AS Tuesday,
SUM(CASE WHEN day_of_week = 'Wednesday' THEN ride_length ELSE 0 END) AS Wednesday,
SUM(CASE WHEN day_of_week = 'Thursday' THEN ride_length ELSE 0 END) AS Thursday,
SUM(CASE WHEN day_of_week = 'Friday' THEN ride_length ELSE 0 END) AS Friday,
SUM(CASE WHEN day_of_week = 'Saturday' THEN ride_length ELSE 0 END) AS Saturday
FROM merged_data
GROUP BY member_casual;
"
ride_duration_by_user_type_day_of_week = sqldf(query)
ride_duration_by_user_type_day_of_week
query = "
SELECT member_casual AS user_type, day_of_week, SUM(ride_length) AS total_duration, AVG(ride_length) AS average_duration
FROM merged_data
GROUP BY user_type, day_of_week
ORDER BY
CASE
WHEN day_of_week = 'Sunday' THEN 1
WHEN day_of_week = 'Monday' THEN 2
WHEN day_of_week = 'Tuesday' THEN 3
WHEN day_of_week = 'Wednesday' THEN 4
WHEN day_of_week = 'Thursday' THEN 5
WHEN day_of_week = 'Friday' THEN 6
WHEN day_of_week = 'Saturday' THEN 7
END;
"
df_ride_duration_by_user_type_day_of_week = sqldf(query)
#For order x-axis
df_ride_duration_by_user_type_day_of_week$day_of_week = factor(df_ride_duration_by_user_type_day_of_week$day_of_week, levels=unique(df_ride_duration_by_user_type_day_of_week$day_of_week))
df_ride_duration_by_user_type_day_of_week
query = "
SELECT member_casual AS user_type,
AVG(CASE WHEN day_of_week = 'Sunday' THEN ride_length ELSE 0 END) AS Sunday,
AVG(CASE WHEN day_of_week = 'Monday' THEN ride_length ELSE 0 END) AS Monday,
AVG(CASE WHEN day_of_week = 'Tuesday' THEN ride_length ELSE 0 END) AS Tuesday,
AVG(CASE WHEN day_of_week = 'Wednesday' THEN ride_length ELSE 0 END) AS Wednesday,
AVG(CASE WHEN day_of_week = 'Thursday' THEN ride_length ELSE 0 END) AS Thursday,
AVG(CASE WHEN day_of_week = 'Friday' THEN ride_length ELSE 0 END) AS Friday,
AVG(CASE WHEN day_of_week = 'Saturday' THEN ride_length ELSE 0 END) AS Saturday
FROM merged_data
GROUP BY member_casual;
"
avg_ride_duration_by_user_type_day_of_week = sqldf(query)
avg_ride_duration_by_user_type_day_of_week
ggplot(df_rides_by_user_type_day_of_week, aes(x = day_of_week, y = total_duration, fill = user_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Total Ride Duration by User Type and Day of the Week",
x = "Day of the Week",
y = "Ride Length") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number())
query = "
SELECT member_casual AS user_type, day_of_week, SUM(ride_length) AS total_duration, AVG(ride_length) AS average_duration
FROM merged_data
GROUP BY user_type, day_of_week
ORDER BY
CASE
WHEN day_of_week = 'Sunday' THEN 1
WHEN day_of_week = 'Monday' THEN 2
WHEN day_of_week = 'Tuesday' THEN 3
WHEN day_of_week = 'Wednesday' THEN 4
WHEN day_of_week = 'Thursday' THEN 5
WHEN day_of_week = 'Friday' THEN 6
WHEN day_of_week = 'Saturday' THEN 7
END;
"
df_ride_duration_by_user_type_day_of_week = sqldf(query)
#For order x-axis
df_ride_duration_by_user_type_day_of_week$day_of_week = factor(df_ride_duration_by_user_type_day_of_week$day_of_week, levels=unique(df_ride_duration_by_user_type_day_of_week$day_of_week))
df_ride_duration_by_user_type_day_of_week
ggplot(df_ride_duration_by_user_type_day_of_week, aes(x = day_of_week, y = total_duration, fill = user_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Total Ride Duration by User Type and Day of the Week",
x = "Day of the Week",
y = "Ride Length") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number())
ggplot(df_ride_duration_by_user_type_day_of_week, aes(x = day_of_week, y = average_duration, fill = user_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Ride Duration by User Type and Day of the Week",
x = "Day of the Week",
y = "Ride Length") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number())
ggplot(df_ride_duration_by_user_type_day_of_week, aes(x = day_of_week, y = average_duration, fill = user_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Ride Duration by User Type and Day of the Week",
x = "Day of the Week",
y = "Ride Length") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number())
query = "
SELECT member_casual AS user_type,
SUM(CASE WHEN time_interval = 'Early Morning' THEN ride_length ELSE 0 END) AS EarlyMorning,
SUM(CASE WHEN time_interval = 'Morning Commute' THEN ride_length ELSE 0 END) AS MorningCommute,
SUM(CASE WHEN time_interval = 'Midday' THEN ride_length ELSE 0 END) AS Midday,
SUM(CASE WHEN time_interval = 'Evening Commute' THEN ride_length ELSE 0 END) AS EveningCommute,
SUM(CASE WHEN time_interval = 'Night' THEN ride_length ELSE 0 END) AS Night
FROM merged_data
GROUP BY member_casual;
"
total_ride_duration_by_user_type_time_interval = sqldf(query)
total_rides_by_user_type_time_interval
query = "
SELECT member_casual AS user_type,
SUM(CASE WHEN time_interval = 'Early Morning' THEN ride_length ELSE 0 END) AS EarlyMorning,
SUM(CASE WHEN time_interval = 'Morning Commute' THEN ride_length ELSE 0 END) AS MorningCommute,
SUM(CASE WHEN time_interval = 'Midday' THEN ride_length ELSE 0 END) AS Midday,
SUM(CASE WHEN time_interval = 'Evening Commute' THEN ride_length ELSE 0 END) AS EveningCommute,
SUM(CASE WHEN time_interval = 'Night' THEN ride_length ELSE 0 END) AS Night
FROM merged_data
GROUP BY member_casual;
"
total_ride_duration_by_user_type_time_interval = sqldf(query)
total_ride_duration_by_user_type_time_interval
query = "
SELECT member_casual AS user_type,
AVG(CASE WHEN day_of_week = 'Sunday' THEN ride_length END) AS Sunday,
AVG(CASE WHEN day_of_week = 'Monday' THEN ride_length END) AS Monday,
AVG(CASE WHEN day_of_week = 'Tuesday' THEN ride_length END) AS Tuesday,
AVG(CASE WHEN day_of_week = 'Wednesday' THEN ride_length END) AS Wednesday,
AVG(CASE WHEN day_of_week = 'Thursday' THEN ride_length END) AS Thursday,
AVG(CASE WHEN day_of_week = 'Friday' THEN ride_length END) AS Friday,
AVG(CASE WHEN day_of_week = 'Saturday' THEN ride_length END) AS Saturday
FROM merged_data
GROUP BY member_casual;
"
avg_ride_duration_by_user_type_day_of_week = sqldf(query)
avg_ride_duration_by_user_type_day_of_week
rm(avg_ride_duration_by_user_type_day_of_week)
View(ride_duration_by_user_type_day_of_week)
View(ride_duration_by_user_type_day_of_week)
query = "
SELECT member_casual AS user_type,
AVG(CASE WHEN day_of_week = 'Sunday' THEN ride_length END) AS Sunday,
AVG(CASE WHEN day_of_week = 'Monday' THEN ride_length END) AS Monday,
AVG(CASE WHEN day_of_week = 'Tuesday' THEN ride_length END) AS Tuesday,
AVG(CASE WHEN day_of_week = 'Wednesday' THEN ride_length END) AS Wednesday,
AVG(CASE WHEN day_of_week = 'Thursday' THEN ride_length END) AS Thursday,
AVG(CASE WHEN day_of_week = 'Friday' THEN ride_length END) AS Friday,
AVG(CASE WHEN day_of_week = 'Saturday' THEN ride_length END) AS Saturday
FROM merged_data
GROUP BY member_casual;
"
avg_ride_duration_by_user_type_day_of_week = sqldf(query)
avg_ride_duration_by_user_type_day_of_week
query = "
SELECT member_casual AS user_type, time_interval, COUNT(*) AS num_rides, SUM(ride_length) AS total_duration, AVG(ride_length) AS average_duration
FROM merged_data
GROUP BY user_type, time_interval
ORDER BY
CASE
WHEN time_interval = 'Early Morning' THEN 1
WHEN time_interval = 'Morning Commute' THEN 2
WHEN time_interval = 'Midday' THEN 3
WHEN time_interval = 'Evening Commute' THEN 4
WHEN time_interval = 'Night' THEN 5
END;
"
df_by_time_interval = sqldf(query)
#For order x-axis
df_by_time_interval$time_interval = factor(df_by_time_interval$time_interval, levels=unique(df_by_time_interval$time_interval))
ggplot(df_by_time_interval, aes(x = time_interval, y = num_rides, fill = user_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Number of Rides by Time Interval",
x = "Time Interval",
y = "Number of Rides") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number())
ggplot(df_by_time_interval, aes(x = day_of_week, y = total_duration, fill = user_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Total Ride Duration by Time Interval",
x = "Time Interval",
y = "Ride Length") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number())
ggplot(df_by_time_interval, aes(x = time_interval, y = total_duration, fill = user_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Total Ride Duration by Time Interval",
x = "Time Interval",
y = "Ride Length") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number())
ggplot(df_by_time_interval, aes(x = time_interval, y = average_duration, fill = user_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Ride Duration by Time Interval",
x = "Time Interval",
y = "Ride Length") +
theme_minimal() +
scale_y_continuous(labels = scales::label_number())
query = "
SELECT member_casual AS user_type,
SUM(CASE WHEN time_interval = 'Early Morning' THEN 1 ELSE 0 END) AS EarlyMorning,
SUM(CASE WHEN time_interval = 'Morning Commute' THEN 1 ELSE 0 END) AS MorningCommute,
SUM(CASE WHEN time_interval = 'Midday' THEN 1 ELSE 0 END) AS Midday,
SUM(CASE WHEN time_interval = 'Evening Commute' THEN 1 ELSE 0 END) AS EveningCommute,
SUM(CASE WHEN time_interval = 'Night' THEN 1 ELSE 0 END) AS Night
FROM merged_data
GROUP BY member_casual;
"
rides_by_user_type_time_interval = sqldf(query)
rides_by_user_type_time_interval
query = "
SELECT member_casual AS user_type,
SUM(CASE WHEN time_interval = 'Early Morning' THEN ride_length ELSE 0 END) AS EarlyMorning,
SUM(CASE WHEN time_interval = 'Morning Commute' THEN ride_length ELSE 0 END) AS MorningCommute,
SUM(CASE WHEN time_interval = 'Midday' THEN ride_length ELSE 0 END) AS Midday,
SUM(CASE WHEN time_interval = 'Evening Commute' THEN ride_length ELSE 0 END) AS EveningCommute,
SUM(CASE WHEN time_interval = 'Night' THEN ride_length ELSE 0 END) AS Night
FROM merged_data
GROUP BY member_casual;
"
total_ride_duration_by_user_type_time_interval = sqldf(query)
total_ride_duration_by_user_type_time_interval
query = "
SELECT member_casual AS user_type,
AVG(CASE WHEN time_interval = 'Early Morning' THEN ride_length ELSE 0 END) AS EarlyMorning,
AVG(CASE WHEN time_interval = 'Morning Commute' THEN ride_length ELSE 0 END) AS MorningCommute,
AVG(CASE WHEN time_interval = 'Midday' THEN ride_length ELSE 0 END) AS Midday,
AVG(CASE WHEN time_interval = 'Evening Commute' THEN ride_length ELSE 0 END) AS EveningCommute,
AVG(CASE WHEN time_interval = 'Night' THEN ride_length ELSE 0 END) AS Night
FROM merged_data
GROUP BY member_casual;
"
avg_ride_duration_by_user_type_time_interval = sqldf(query)
exist("tripdata_2023_01")
exists("tripdata_2023_01")
